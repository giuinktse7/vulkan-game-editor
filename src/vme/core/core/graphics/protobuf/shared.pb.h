// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: shared.proto
// Protobuf C++ Version: 6.31.1

#ifndef shared_2eproto_2epb_2eh
#define shared_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_shared_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_shared_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_shared_2eproto;
}  // extern "C"
namespace tibia {
namespace protobuf {
namespace shared {
enum ANIMATION_LOOP_TYPE : int;
extern const uint32_t ANIMATION_LOOP_TYPE_internal_data_[];
enum HOOK_TYPE : int;
extern const uint32_t HOOK_TYPE_internal_data_[];
enum ITEM_CATEGORY : int;
extern const uint32_t ITEM_CATEGORY_internal_data_[];
enum PLAYER_ACTION : int;
extern const uint32_t PLAYER_ACTION_internal_data_[];
enum VOCATION : int;
extern const uint32_t VOCATION_internal_data_[];
class Coordinate;
struct CoordinateDefaultTypeInternal;
extern CoordinateDefaultTypeInternal _Coordinate_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Coordinate_class_data_;
}  // namespace shared
}  // namespace protobuf
}  // namespace tibia
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::tibia::protobuf::shared::ANIMATION_LOOP_TYPE_internal_data_>
    internal::EnumTraitsImpl::value<::tibia::protobuf::shared::ANIMATION_LOOP_TYPE>;
template <>
internal::EnumTraitsT<::tibia::protobuf::shared::HOOK_TYPE_internal_data_>
    internal::EnumTraitsImpl::value<::tibia::protobuf::shared::HOOK_TYPE>;
template <>
internal::EnumTraitsT<::tibia::protobuf::shared::ITEM_CATEGORY_internal_data_>
    internal::EnumTraitsImpl::value<::tibia::protobuf::shared::ITEM_CATEGORY>;
template <>
internal::EnumTraitsT<::tibia::protobuf::shared::PLAYER_ACTION_internal_data_>
    internal::EnumTraitsImpl::value<::tibia::protobuf::shared::PLAYER_ACTION>;
template <>
internal::EnumTraitsT<::tibia::protobuf::shared::VOCATION_internal_data_>
    internal::EnumTraitsImpl::value<::tibia::protobuf::shared::VOCATION>;
}  // namespace protobuf
}  // namespace google

namespace tibia {
namespace protobuf {
namespace shared {
enum PLAYER_ACTION : int {
  PLAYER_ACTION_NONE = 0,
  PLAYER_ACTION_LOOK = 1,
  PLAYER_ACTION_USE = 2,
  PLAYER_ACTION_OPEN = 3,
  PLAYER_ACTION_AUTOWALK_HIGHLIGHT = 4,
};

extern const uint32_t PLAYER_ACTION_internal_data_[];
inline constexpr PLAYER_ACTION PLAYER_ACTION_MIN =
    static_cast<PLAYER_ACTION>(0);
inline constexpr PLAYER_ACTION PLAYER_ACTION_MAX =
    static_cast<PLAYER_ACTION>(4);
inline bool PLAYER_ACTION_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int PLAYER_ACTION_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL PLAYER_ACTION_descriptor();
template <typename T>
const ::std::string& PLAYER_ACTION_Name(T value) {
  static_assert(::std::is_same<T, PLAYER_ACTION>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to PLAYER_ACTION_Name().");
  return PLAYER_ACTION_Name(static_cast<PLAYER_ACTION>(value));
}
template <>
inline const ::std::string& PLAYER_ACTION_Name(PLAYER_ACTION value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PLAYER_ACTION_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool PLAYER_ACTION_Parse(
    ::absl::string_view name, PLAYER_ACTION* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAYER_ACTION>(PLAYER_ACTION_descriptor(), name,
                                           value);
}
enum ITEM_CATEGORY : int {
  ITEM_CATEGORY_ARMORS = 1,
  ITEM_CATEGORY_AMULETS = 2,
  ITEM_CATEGORY_BOOTS = 3,
  ITEM_CATEGORY_CONTAINERS = 4,
  ITEM_CATEGORY_DECORATION = 5,
  ITEM_CATEGORY_FOOD = 6,
  ITEM_CATEGORY_HELMETS_HATS = 7,
  ITEM_CATEGORY_LEGS = 8,
  ITEM_CATEGORY_OTHERS = 9,
  ITEM_CATEGORY_POTIONS = 10,
  ITEM_CATEGORY_RINGS = 11,
  ITEM_CATEGORY_RUNES = 12,
  ITEM_CATEGORY_SHIELDS = 13,
  ITEM_CATEGORY_TOOLS = 14,
  ITEM_CATEGORY_VALUABLES = 15,
  ITEM_CATEGORY_AMMUNITION = 16,
  ITEM_CATEGORY_AXES = 17,
  ITEM_CATEGORY_CLUBS = 18,
  ITEM_CATEGORY_DISTANCE_WEAPONS = 19,
  ITEM_CATEGORY_SWORDS = 20,
  ITEM_CATEGORY_WANDS_RODS = 21,
  ITEM_CATEGORY_PREMIUM_SCROLLS = 22,
  ITEM_CATEGORY_TIBIA_COINS = 23,
  ITEM_CATEGORY_CREATURE_PRODUCTS = 24,
  ITEM_CATEGORY_QUIVER = 25,
};

extern const uint32_t ITEM_CATEGORY_internal_data_[];
inline constexpr ITEM_CATEGORY ITEM_CATEGORY_MIN =
    static_cast<ITEM_CATEGORY>(1);
inline constexpr ITEM_CATEGORY ITEM_CATEGORY_MAX =
    static_cast<ITEM_CATEGORY>(25);
inline bool ITEM_CATEGORY_IsValid(int value) {
  return 1 <= value && value <= 25;
}
inline constexpr int ITEM_CATEGORY_ARRAYSIZE = 25 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ITEM_CATEGORY_descriptor();
template <typename T>
const ::std::string& ITEM_CATEGORY_Name(T value) {
  static_assert(::std::is_same<T, ITEM_CATEGORY>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to ITEM_CATEGORY_Name().");
  return ITEM_CATEGORY_Name(static_cast<ITEM_CATEGORY>(value));
}
template <>
inline const ::std::string& ITEM_CATEGORY_Name(ITEM_CATEGORY value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ITEM_CATEGORY_descriptor, 1, 25>(
      static_cast<int>(value));
}
inline bool ITEM_CATEGORY_Parse(
    ::absl::string_view name, ITEM_CATEGORY* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ITEM_CATEGORY>(ITEM_CATEGORY_descriptor(), name,
                                           value);
}
enum VOCATION : int {
  VOCATION_ANY = -1,
  VOCATION_NONE = 0,
  VOCATION_KNIGHT = 1,
  VOCATION_PALADIN = 2,
  VOCATION_SORCERER = 3,
  VOCATION_DRUID = 4,
  VOCATION_PROMOTED = 10,
};

extern const uint32_t VOCATION_internal_data_[];
inline constexpr VOCATION VOCATION_MIN =
    static_cast<VOCATION>(-1);
inline constexpr VOCATION VOCATION_MAX =
    static_cast<VOCATION>(10);
inline bool VOCATION_IsValid(int value) {
  return ::google::protobuf::internal::ValidateEnum(value, VOCATION_internal_data_);
}
inline constexpr int VOCATION_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL VOCATION_descriptor();
template <typename T>
const ::std::string& VOCATION_Name(T value) {
  static_assert(::std::is_same<T, VOCATION>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to VOCATION_Name().");
  return VOCATION_Name(static_cast<VOCATION>(value));
}
template <>
inline const ::std::string& VOCATION_Name(VOCATION value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VOCATION_descriptor, -1, 10>(
      static_cast<int>(value));
}
inline bool VOCATION_Parse(
    ::absl::string_view name, VOCATION* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<VOCATION>(VOCATION_descriptor(), name,
                                           value);
}
enum ANIMATION_LOOP_TYPE : int {
  ANIMATION_LOOP_TYPE_PINGPONG = -1,
  ANIMATION_LOOP_TYPE_INFINITE = 0,
  ANIMATION_LOOP_TYPE_COUNTED = 1,
};

extern const uint32_t ANIMATION_LOOP_TYPE_internal_data_[];
inline constexpr ANIMATION_LOOP_TYPE ANIMATION_LOOP_TYPE_MIN =
    static_cast<ANIMATION_LOOP_TYPE>(-1);
inline constexpr ANIMATION_LOOP_TYPE ANIMATION_LOOP_TYPE_MAX =
    static_cast<ANIMATION_LOOP_TYPE>(1);
inline bool ANIMATION_LOOP_TYPE_IsValid(int value) {
  return -1 <= value && value <= 1;
}
inline constexpr int ANIMATION_LOOP_TYPE_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ANIMATION_LOOP_TYPE_descriptor();
template <typename T>
const ::std::string& ANIMATION_LOOP_TYPE_Name(T value) {
  static_assert(::std::is_same<T, ANIMATION_LOOP_TYPE>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to ANIMATION_LOOP_TYPE_Name().");
  return ANIMATION_LOOP_TYPE_Name(static_cast<ANIMATION_LOOP_TYPE>(value));
}
template <>
inline const ::std::string& ANIMATION_LOOP_TYPE_Name(ANIMATION_LOOP_TYPE value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ANIMATION_LOOP_TYPE_descriptor, -1, 1>(
      static_cast<int>(value));
}
inline bool ANIMATION_LOOP_TYPE_Parse(
    ::absl::string_view name, ANIMATION_LOOP_TYPE* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ANIMATION_LOOP_TYPE>(ANIMATION_LOOP_TYPE_descriptor(), name,
                                           value);
}
enum HOOK_TYPE : int {
  HOOK_TYPE_SOUTH = 1,
  HOOK_TYPE_EAST = 2,
};

extern const uint32_t HOOK_TYPE_internal_data_[];
inline constexpr HOOK_TYPE HOOK_TYPE_MIN =
    static_cast<HOOK_TYPE>(1);
inline constexpr HOOK_TYPE HOOK_TYPE_MAX =
    static_cast<HOOK_TYPE>(2);
inline bool HOOK_TYPE_IsValid(int value) {
  return 1 <= value && value <= 2;
}
inline constexpr int HOOK_TYPE_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL HOOK_TYPE_descriptor();
template <typename T>
const ::std::string& HOOK_TYPE_Name(T value) {
  static_assert(::std::is_same<T, HOOK_TYPE>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to HOOK_TYPE_Name().");
  return HOOK_TYPE_Name(static_cast<HOOK_TYPE>(value));
}
template <>
inline const ::std::string& HOOK_TYPE_Name(HOOK_TYPE value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HOOK_TYPE_descriptor, 1, 2>(
      static_cast<int>(value));
}
inline bool HOOK_TYPE_Parse(
    ::absl::string_view name, HOOK_TYPE* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<HOOK_TYPE>(HOOK_TYPE_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class Coordinate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tibia.protobuf.shared.Coordinate) */ {
 public:
  inline Coordinate() : Coordinate(nullptr) {}
  ~Coordinate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Coordinate* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Coordinate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Coordinate(::google::protobuf::internal::ConstantInitialized);

  inline Coordinate(const Coordinate& from) : Coordinate(nullptr, from) {}
  inline Coordinate(Coordinate&& from) noexcept
      : Coordinate(nullptr, ::std::move(from)) {}
  inline Coordinate& operator=(const Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinate& operator=(Coordinate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinate& default_instance() {
    return *reinterpret_cast<const Coordinate*>(
        &_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Coordinate& a, Coordinate& b) { a.Swap(&b); }
  inline void Swap(Coordinate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinate* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Coordinate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Coordinate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Coordinate& from) { Coordinate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Coordinate* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tibia.protobuf.shared.Coordinate"; }

 protected:
  explicit Coordinate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Coordinate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Coordinate& from);
  Coordinate(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Coordinate&& from) noexcept
      : Coordinate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional uint32 x = 1;
  bool has_x() const;
  void clear_x() ;
  ::uint32_t x() const;
  void set_x(::uint32_t value);

  private:
  ::uint32_t _internal_x() const;
  void _internal_set_x(::uint32_t value);

  public:
  // optional uint32 y = 2;
  bool has_y() const;
  void clear_y() ;
  ::uint32_t y() const;
  void set_y(::uint32_t value);

  private:
  ::uint32_t _internal_y() const;
  void _internal_set_y(::uint32_t value);

  public:
  // optional uint32 z = 3;
  bool has_z() const;
  void clear_z() ;
  ::uint32_t z() const;
  void set_z(::uint32_t value);

  private:
  ::uint32_t _internal_z() const;
  void _internal_set_z(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tibia.protobuf.shared.Coordinate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Coordinate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t x_;
    ::uint32_t y_;
    ::uint32_t z_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shared_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Coordinate_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Coordinate

// optional uint32 x = 1;
inline bool Coordinate::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Coordinate::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Coordinate::x() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.shared.Coordinate.x)
  return _internal_x();
}
inline void Coordinate::set_x(::uint32_t value) {
  _internal_set_x(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tibia.protobuf.shared.Coordinate.x)
}
inline ::uint32_t Coordinate::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Coordinate::_internal_set_x(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// optional uint32 y = 2;
inline bool Coordinate::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Coordinate::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Coordinate::y() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.shared.Coordinate.y)
  return _internal_y();
}
inline void Coordinate::set_y(::uint32_t value) {
  _internal_set_y(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:tibia.protobuf.shared.Coordinate.y)
}
inline ::uint32_t Coordinate::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Coordinate::_internal_set_y(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// optional uint32 z = 3;
inline bool Coordinate::has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Coordinate::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Coordinate::z() const {
  // @@protoc_insertion_point(field_get:tibia.protobuf.shared.Coordinate.z)
  return _internal_z();
}
inline void Coordinate::set_z(::uint32_t value) {
  _internal_set_z(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:tibia.protobuf.shared.Coordinate.z)
}
inline ::uint32_t Coordinate::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Coordinate::_internal_set_z(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace shared
}  // namespace protobuf
}  // namespace tibia


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tibia::protobuf::shared::PLAYER_ACTION> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::tibia::protobuf::shared::PLAYER_ACTION>() {
  return ::tibia::protobuf::shared::PLAYER_ACTION_descriptor();
}
template <>
struct is_proto_enum<::tibia::protobuf::shared::ITEM_CATEGORY> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::tibia::protobuf::shared::ITEM_CATEGORY>() {
  return ::tibia::protobuf::shared::ITEM_CATEGORY_descriptor();
}
template <>
struct is_proto_enum<::tibia::protobuf::shared::VOCATION> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::tibia::protobuf::shared::VOCATION>() {
  return ::tibia::protobuf::shared::VOCATION_descriptor();
}
template <>
struct is_proto_enum<::tibia::protobuf::shared::ANIMATION_LOOP_TYPE> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::tibia::protobuf::shared::ANIMATION_LOOP_TYPE>() {
  return ::tibia::protobuf::shared::ANIMATION_LOOP_TYPE_descriptor();
}
template <>
struct is_proto_enum<::tibia::protobuf::shared::HOOK_TYPE> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::tibia::protobuf::shared::HOOK_TYPE>() {
  return ::tibia::protobuf::shared::HOOK_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // shared_2eproto_2epb_2eh
